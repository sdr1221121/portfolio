---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import {Content as EverydayDev}  from '../../data/projects/everyday-dev.md';
import {Content as LTWPreLoved} from '../../data/projects/ltw-pre-loved.md';
import {Content as Niployments} from '../../data/projects/niployments.md';
import {Content as Portifolio} from '../../data/projects/portifolio.md';
import {Content as SimpleTombOfTheMask} from '../../data/projects/simple-tomb-of-the-mask.md';
import {Content as Uni} from '../../data/projects/uni.md';
import {Content as USettle} from '../../data/projects/usettle.md';
import {Content as WebsiteAE} from '../../data/projects/website-ae.md';
import {Content as WebsiteNIAEFEUP} from '../../data/projects/website-niaefeup.md';
import {Content as Tinyrp} from '../../data/projects/tiny-rp.md';

import projects from '../../data/projects.json'
import { Users,Github, SquareArrowOutUpRight } from '@lucide/astro';

export async function getStaticPaths() {
  return [
    // { params: { /* required */ }, props: { /* optional */ } },
    { params: { id: 'everyday-dev' } }, // [post] is the parameter
    { params: { id: 'ltw-pre-loved' } }, // [post] is the parameter
    { params: { id: 'niployments' } }, // [post] is the parameter
    { params: { id: 'portifolio' } }, // [post] is the parameter
    { params: { id: 'simple-tomb-of-the-mask' } }, // [post] is the parameter
    { params: { id: 'uni' } }, // [post] is the parameter
    { params: { id: 'usettle' } }, // [post] is the parameter
    { params: { id: 'website-ae' } }, // [post] is the parameter
    { params: { id: 'website-niaefeup' } }, // [post] is the parameter
		{ params: { id: 'tinyrp' } }
    // ...
  ];
}

const projectsMap = {
  "everyday-dev": EverydayDev,
  "ltw-pre-loved":LTWPreLoved,
  "niployments":Niployments,
  "portifolio":Portifolio,
  "simple-tomb-of-the-mask":SimpleTombOfTheMask,
  "uni":Uni,
  "usettle": USettle,
  "website-ae": WebsiteAE,
  "website-niaefeup": WebsiteNIAEFEUP,
	"tinyrp": Tinyrp
};

const { id = '' } = Astro.params;
const ProjectContent = id in projectsMap ? projectsMap[id as keyof typeof projectsMap] : null;

const project = projects.find((project) => project.slug == id)
---

<Layout>
  <div class="flex flex-col md:flex-row justify-between items-center mt-5">
    <div class="flex gap-2">
      <a class="text-white text-3xl font-bold no-underline" href={`/projects/${project?.slug}`}>{project?.title}</a>
      <div class="text-gray-300 flex gap-1 items-center">
        <Users/>
        {project?.num_contributors} 
      </div>
    </div>
    <div class="flex flex-row gap-2 md:justify-between md:items-center">
      <a href={project?.github_link} class="text-[#c96442]">
        <Github/>
      </a>
      {project?.link && 
        <a href={project?.link} class="text-[#c96442]">
          <SquareArrowOutUpRight />
        </a>
      }
    </div>
  </div>
  {ProjectContent ? (
    <article>
      <ProjectContent />
    </article>
  ) : (
    <p>Project not found.</p>
  )}
</Layout>
